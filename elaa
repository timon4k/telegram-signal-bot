import sys
import telebot
from telebot import types
import requests
from dotenv import load_dotenv
import os
import time
import random
import logging
from datetime import datetime

# Configurare logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('crypto_bot.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# √éncarcƒÉ variabilele din .env
load_dotenv()

API_TOKEN = os.getenv("TELEGRAM_API_TOKEN")

# Configura»õii
CONFIG = {
    'allowed_users': [int(id) for id in os.getenv("ALLOWED_USERS", "").split(",") if id],
    'update_interval': 60,
    'risk_level': 'medium',
    'max_signals_per_day': 30,
    'strategy': 'auto'
}

# Lista extinsƒÉ cu 50 de monede (inclusiv Futures)
TOP_50_CHEAP_COINS = [
    "BTCUSDT", "ETHUSDT", "BNBUSDT", "SOLUSDT", "XRPUSDT",
    "ADAUSDT", "DOGEUSDT", "DOTUSDT", "SHIBUSDT", "MATICUSDT",
    "LTCUSDT", "TRXUSDT", "AVAXUSDT", "LINKUSDT", "ATOMUSDT",
    "UNIUSDT", "XLMUSDT", "ALGOUSDT", "FILUSDT", "VETUSDT",
    "THETAUSDT", "XTZUSDT", "EOSUSDT", "AAVEUSDT", "CAKEUSDT",
    "AXSUSDT", "NEOUSDT", "KLAYUSDT", "RUNEUSDT", "GRTUSDT",
    "MANAUSDT", "SANDUSDT", "CHZUSDT", "ENJUSDT", "HOTUSDT",
    "ZECUSDT", "DASHUSDT", "WAVESUSDT", "SNXUSDT", "CRVUSDT",
    "COMPUSDT", "KSMUSDT", "ARUSDT", "FTMUSDT", "ONEUSDT",
    "CELRUSDT", "OMGUSDT", "IOSTUSDT", "STORJUSDT", "SKLUSDT"
]

# Stocare date
user_states = {}
signals_history = []
daily_signal_count = 0

class TradingStrategy:
    @staticmethod
    def get_technical_analysis(symbol):
        """Ob»õine date tehnice de pe Binance"""
        try:
            url = f"https://fapi.binance.com/fapi/v1/ticker/24hr?symbol={symbol}"
            response = requests.get(url, timeout=15)
            response.raise_for_status()
            data = response.json()

            price_change = float(data['priceChangePercent'])
            volume = float(data['volume'])
            last_price = float(data['lastPrice'])
            high_price = float(data['highPrice'])
            low_price = float(data['lowPrice'])

            rsi = max(10, min(90, 50 + price_change * 0.5))
            macd = price_change * 0.01

            if price_change > 0.5:
                trend = "ascending"
            elif price_change < -0.5:
                trend = "descending"
            else:
                trend = "neutral"

            return {
                'rsi': rsi,
                'macd': macd,
                'trend': trend,
                'volume': volume,
                'price': last_price,
                'high': high_price,
                'low': low_price,
                'change': price_change,
                'success': True
            }
        except Exception as e:
            logger.error(f"Eroare la analiza tehnicƒÉ pentru {symbol}: {str(e)}")
            return {'success': False, 'error': str(e)}

    @staticmethod
    def auto_strategy(symbol):
        """Strategie automatƒÉ bazatƒÉ pe multiple indicatori"""
        try:
            analysis = TradingStrategy.get_technical_analysis(symbol)
            if not analysis['success']:
                return None, None, f"Eroare analizƒÉ: {analysis.get('error', 'NecunoscutƒÉ')}"

            reasons = []
            signal_score = 0

            if analysis['rsi'] < 30:
                signal_score += 2
                reasons.append(f"RSI SCƒÇZUT ({analysis['rsi']:.1f})")
            elif analysis['rsi'] > 70:
                signal_score -= 2
                reasons.append(f"RSI RIDICAT ({analysis['rsi']:.1f})")

            if analysis['trend'] == 'ascending':
                signal_score += 1
                reasons.append("TREND ASCENDENT")
            elif analysis['trend'] == 'descending':
                signal_score -= 1
                reasons.append("TREND DESCENDENT")

            if analysis['volume'] > 1000000:
                signal_score += 1
                reasons.append("VOLUM MARE")

            if analysis['change'] > 3:
                signal_score += 1
                reasons.append(f"PRE»ö +{analysis['change']:.1f}%")
            elif analysis['change'] < -3:
                signal_score -= 1
                reasons.append(f"PRE»ö {analysis['change']:.1f}%")

            if signal_score >= 3:
                return "BUY", analysis['price'], " | ".join(reasons)
            elif signal_score <= -3:
                return "SELL", analysis['price'], " | ".join(reasons)
            else:
                return None, analysis['price'], "PIA»öƒÇ LATERALƒÇ: " + " | ".join(reasons)
        except Exception as e:
            logger.error(f"Eroare √Æn auto_strategy: {str(e)}")
            return None, None, f"Eroare internƒÉ: {str(e)}"

def is_user_authorized(user_id):
    if not CONFIG['allowed_users']:
        return True
    return user_id in CONFIG['allowed_users']

def format_signal_message(symbol, signal, price, reason):
    coin_clean = symbol.replace("USDT", "")
    futures_link = f"https://www.binance.com/en/futures/{coin_clean}_USDT"
    spot_link = f"https://www.binance.com/en/trade/{coin_clean}_USDT"
    msg = "üöÄ *SEMNAL TRADING* üöÄ\n\n"
    msg += f"üè∑ *Moneda*: `{symbol}`\n"
    msg += f"üí∞ *Pre»õ curent*: `{price:.6f}`\n"
    msg += f"üìä *Recomandare*: **{signal}**\n"
    msg += f"üìå *Motiv*: {reason}\n"
    msg += f"[üìà Futures Trading]({futures_link}) | [üíé Spot Trading]({spot_link})"
    return msg

# Ini»õializeazƒÉ botul 
bot = telebot.TeleBot(API_TOKEN)

@bot.message_handler(commands=['start', 'help'])
def send_welcome(message):
    if not is_user_authorized(message.from_user.id):
        bot.reply_to(message, "‚õî Acces restric»õionat")
        return

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton("üîç CautƒÉ semnal"))
    markup.add(types.KeyboardButton("üìä Statistici"))
    markup.add(types.KeyboardButton("‚öôÔ∏è SetƒÉri"))

    bot.send_message(
        message.chat.id,
        "ü§ñ *Binance Futures Signals Bot* ü§ñ\n\n"
        "AnalizeazƒÉ 50+ monede »ôi genereazƒÉ semnale de trading.\n"
        "Folose»ôte butonul *CautƒÉ semnal* pentru a √Æncepe.",
        parse_mode="Markdown",
        reply_markup=markup
    )

@bot.message_handler(func=lambda msg: msg.text == "üîç CautƒÉ semnal")
def handle_search_signal(message):
    if not is_user_authorized(message.from_user.id):
        return

    global daily_signal_count
    if daily_signal_count >= CONFIG['max_signals_per_day']:
        bot.send_message(message.chat.id, "‚ö†Ô∏è Limita zilnicƒÉ atinsƒÉ (30 semnale/zi)")
        return

    bot.send_chat_action(message.chat.id, 'typing')
    time.sleep(1)

    analyzed_coins = []
    attempts = 0
    while len(analyzed_coins) < 3 and attempts < 5:
        symbol = random.choice(TOP_50_CHEAP_COINS)
        signal, price, reason = TradingStrategy.auto_strategy(symbol)
        if signal:
            analyzed_coins.append((symbol, signal, price, reason))
        attempts += 1

    if analyzed_coins:
        best_signal = max(analyzed_coins, key=lambda x: len(x[3].split(" | ")))
        symbol, signal, price, reason = best_signal
        daily_signal_count += 1
        signals_history.append({
            'time': datetime.now().strftime("%H:%M:%S"),
            'symbol': symbol,
            'signal': signal,
            'price': price,
            'user': message.from_user.id
        })

        keyboard = types.InlineKeyboardMarkup()
        keyboard.row(
            types.InlineKeyboardButton("üîÑ Alt semnal", callback_data="new_signal"),
            types.InlineKeyboardButton("üìä Vezi grafic", url=f"https://www.binance.com/en/futures/{symbol.replace('USDT',  '')}_USDT")
        )

        bot.send_message(
            message.chat.id,
            format_signal_message(symbol, signal, price, reason),
            parse_mode="Markdown",
            reply_markup=keyboard,
            disable_web_page_preview=True
        )
    else:
        sample_symbol = random.choice(TOP_50_CHEAP_COINS)
        analysis = TradingStrategy.get_technical_analysis(sample_symbol)
        if analysis['success']:
            msg = (f"üîç *AnalizƒÉ pie»õei*\n"
                   f"Pia»õa actualƒÉ nu prezintƒÉ oportunitƒÉ»õi clare de trading.\n"
                   f"Exemplu pentru {sample_symbol}:\n"
                   f"- Pre»õ: {analysis['price']:.6f}\n"
                   f"- Volum: {analysis['volume']:,.0f}\n"
                   f"- Schimbare 24h: {analysis['change']:.1f}%\n"
                   f"- RSI aproximativ: {analysis['rsi']:.1f}\n"
                   f"√éncearcƒÉ din nou peste c√¢teva minute.")
        else:
            msg = ("‚ö†Ô∏è *Aten»õie*\n"
                   "Serverele Binance par a avea probleme temporare.\n"
                   "Te rugƒÉm sƒÉ √Æncerci mai t√¢rziu.")

        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üîÑ Re√ÆncarcƒÉ", callback_data="new_signal"))
        bot.send_message(message.chat.id, msg, parse_mode="Markdown", reply_markup=markup)

@bot.message_handler(func=lambda msg: msg.text == "üìä Statistici")
def handle_stats(message):
    if not is_user_authorized(message.from_user.id):
        return

    stats_msg = "üìà *Statistici semnale* üìâ\n"
    stats_msg += f"‚Ä¢ Semnale astƒÉzi: {daily_signal_count}/{CONFIG['max_signals_per_day']}\n"
    stats_msg += f"‚Ä¢ Strategie: {CONFIG['strategy'].capitalize()}\n"
    stats_msg += f"‚Ä¢ Nivel risc: {CONFIG['risk_level'].capitalize()}\n"
    stats_msg += "üìå *Ultimele semnale*:\n"

    for signal in signals_history[-5:]:
        stats_msg += f"- {signal['time']} {signal['symbol']} {signal['signal']} @ {signal['price']:.6f}\n"

    bot.send_message(message.chat.id, stats_msg, parse_mode="Markdown")

@bot.message_handler(func=lambda msg: msg.text == "‚öôÔ∏è SetƒÉri")
def handle_settings(message):
    if not is_user_authorized(message.from_user.id):
        return

    keyboard = types.InlineKeyboardMarkup()
    keyboard.row(
        types.InlineKeyboardButton("üìà SimplƒÉ", callback_data="set_strategy_simple"),
        types.InlineKeyboardButton("üìâ RSI", callback_data="set_strategy_rsi")
    )
    keyboard.row(
        types.InlineKeyboardButton("üìä MACD", callback_data="set_strategy_macd"),
        types.InlineKeyboardButton("üß© CombinatƒÉ", callback_data="set_strategy_combined")
    )
    keyboard.row(
        types.InlineKeyboardButton("üîÑ Resetare limite", callback_data="reset_limits")
    )

    bot.send_message(
        message.chat.id,
        f"‚öôÔ∏è *SetƒÉri curente* ‚öôÔ∏è\n"
        f"üî∏ Strategie: *{CONFIG['strategy'].capitalize()}*\n"
        f"üî∏ Nivel risc: *{CONFIG['risk_level'].capitalize()}*\n"
        f"üî∏ Semnale astƒÉzi: *{daily_signal_count}/{CONFIG['max_signals_per_day']}*",
        parse_mode="Markdown",
        reply_markup=keyboard
    )

@bot.callback_query_handler(func=lambda call: True)
def handle_callback(call):
    if call.data == "new_signal":
        handle_search_signal(call.message)
    elif call.data.startswith("set_strategy_"):
        strategy = call.data.split("_")[2]
        CONFIG['strategy'] = strategy
        bot.answer_callback_query(call.id, f"‚úÖ Strategie setatƒÉ: {strategy.capitalize()}")
        handle_settings(call.message)
    elif call.data == "reset_limits":
        global daily_signal_count
        daily_signal_count = 0
        bot.answer_callback_query(call.id, "‚úÖ Limite resetate cu succes!")
        handle_settings(call.message)

if __name__ == "__main__":
    logger.info("Starting Binance Futures Signals Bot...")
    try:
        bot.infinity_polling()
    except Exception as e:
        logger.error(f"Bot crashed: {str(e)}")
        time.sleep(60)
        os.execv(sys.argv[0], sys.argv)
